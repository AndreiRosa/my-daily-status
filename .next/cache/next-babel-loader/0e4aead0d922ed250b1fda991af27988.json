{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\mydailystatus\\\\pages\\\\app.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useEffect } from 'react';\nimport Marker from '../components/Marker';\nimport GoogleMap from '../components/GoogleMap';\nimport router from \"next/router\";\nimport auth0 from \"../lib/auth0\";\nimport { db } from \"../lib/db\";\n\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n  places.forEach(place => {\n    bounds.extend(new maps.LatLng(place.geometry.location.lat, place.geometry.location.lng));\n  });\n  return bounds;\n};\n\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, 'idle', () => {\n    maps.event.addDomListener(window, 'resize', () => {\n      map.fitBounds(bounds);\n    });\n  });\n};\n\nconst apiIsLoaded = (map, maps, places) => {\n  const bounds = getMapBounds(map, maps, places);\n  map.fitBounds(bounds);\n  bindResizeListener(map, maps, bounds);\n};\n\nconst App = props => {\n  useEffect(() => {\n    if (!props.isAuth) router.push(\"/\");else if (props.forceCreate) router.push(\"/create-status\");\n  });\n  const defaultProps = {\n    center: [props.user.latitude, props.user.longitude]\n  };\n  if (!props.isAuth || props.forceCreate) return null;\n  return __jsx(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(GoogleMap, {\n    defaultCenter: defaultProps.center,\n    yesIWantToUseGoogleMapApiInternals: true,\n    defaultZoom: 10,\n    onGoogleApiLoaded: ({\n      map,\n      maps\n    }) => apiIsLoaded(map, maps, props.checkins),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, props.checkins.map(checkin => __jsx(Marker, {\n    key: checkin.id,\n    lat: checkin.coords.latitude,\n    lng: checkin.coords.longitude,\n    text: checkin.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default App;\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req);\n  const currentDate = new Date().toISOString().substr(0, 10);\n  let checkinsList = [];\n  let props = {\n    user: {},\n    isAuth: false,\n    forceCreate: false,\n    checkins: []\n  };\n\n  if (session) {\n    const {\n      user\n    } = session;\n    const todaysCheckin = await db.collection(\"markers\").doc(currentDate).collection(\"checks\").doc(user.sub).get();\n    let forceCreate = true;\n\n    if (todaysCheckin.data()) {\n      const {\n        coordinates\n      } = todaysCheckin.data();\n      forceCreate = false;\n      const {\n        docs\n      } = await db.collection(\"markers\").doc(currentDate).collection(\"checks\").near({\n        center: coordinates,\n        radius: 18000\n      }).get();\n      checkinsList = docs.map(doc => {\n        const {\n          status,\n          coordinates\n        } = doc.data();\n        const {\n          latitude,\n          longitude\n        } = coordinates;\n        return {\n          id: doc.id,\n          status,\n          coords: {\n            latitude,\n            longitude\n          }\n        };\n      });\n    }\n\n    props = {\n      user,\n      isAuth: true,\n      forceCreate,\n      checkins: checkinsList\n    };\n  }\n\n  return {\n    props\n  };\n}","map":{"version":3,"sources":["C:/Users/andre/Desktop/mydailystatus/pages/app.js"],"names":["React","Fragment","useEffect","Marker","GoogleMap","router","auth0","db","getMapBounds","map","maps","places","bounds","LatLngBounds","forEach","place","extend","LatLng","geometry","location","lat","lng","bindResizeListener","event","addDomListenerOnce","addDomListener","window","fitBounds","apiIsLoaded","App","props","isAuth","push","forceCreate","defaultProps","center","user","latitude","longitude","height","width","checkins","checkin","id","coords","status","getServerSideProps","req","res","session","getSession","currentDate","Date","toISOString","substr","checkinsList","todaysCheckin","collection","doc","sub","get","data","coordinates","docs","near","radius"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,EAAT,QAAmB,WAAnB;;AAEA,MAAMC,YAAY,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,KAAuB;AAC1C,QAAMC,MAAM,GAAG,IAAIF,IAAI,CAACG,YAAT,EAAf;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAgBC,KAAD,IAAW;AACxBH,IAAAA,MAAM,CAACI,MAAP,CAAc,IAAIN,IAAI,CAACO,MAAT,CACZF,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBC,GADZ,EAEZL,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBE,GAFZ,CAAd;AAID,GALD;AAMA,SAAOT,MAAP;AACD,CATD;;AAWA,MAAMU,kBAAkB,GAAG,CAACb,GAAD,EAAMC,IAAN,EAAYE,MAAZ,KAAuB;AAChDF,EAAAA,IAAI,CAACa,KAAL,CAAWC,kBAAX,CAA8Bf,GAA9B,EAAmC,MAAnC,EAA2C,MAAM;AAC/CC,IAAAA,IAAI,CAACa,KAAL,CAAWE,cAAX,CAA0BC,MAA1B,EAAkC,QAAlC,EAA4C,MAAM;AAChDjB,MAAAA,GAAG,CAACkB,SAAJ,CAAcf,MAAd;AACD,KAFD;AAGD,GAJD;AAKD,CAND;;AAQA,MAAMgB,WAAW,GAAG,CAACnB,GAAD,EAAMC,IAAN,EAAYC,MAAZ,KAAuB;AACzC,QAAMC,MAAM,GAAGJ,YAAY,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,CAA3B;AACAF,EAAAA,GAAG,CAACkB,SAAJ,CAAcf,MAAd;AACAU,EAAAA,kBAAkB,CAACb,GAAD,EAAMC,IAAN,EAAYE,MAAZ,CAAlB;AACD,CAJD;;AAMA,MAAMiB,GAAG,GAAIC,KAAD,IAAW;AACrB5B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC4B,KAAK,CAACC,MAAX,EAAmB1B,MAAM,CAAC2B,IAAP,CAAY,GAAZ,EAAnB,KACK,IAAIF,KAAK,CAACG,WAAV,EAAuB5B,MAAM,CAAC2B,IAAP,CAAY,gBAAZ;AAC7B,GAHQ,CAAT;AAKA,QAAME,YAAY,GAAG;AACnBC,IAAAA,MAAM,EAAE,CAACL,KAAK,CAACM,IAAN,CAAWC,QAAZ,EAAsBP,KAAK,CAACM,IAAN,CAAWE,SAAjC;AADW,GAArB;AAIA,MAAI,CAACR,KAAK,CAACC,MAAP,IAAiBD,KAAK,CAACG,WAA3B,EAAwC,OAAO,IAAP;AAExC,SACE;AAAK,IAAA,KAAK,EAAE;AAAEM,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AACA,IAAA,aAAa,EAAEN,YAAY,CAACC,MAD5B;AAEA,IAAA,kCAAkC,MAFlC;AAGA,IAAA,WAAW,EAAE,EAHb;AAIA,IAAA,iBAAiB,EAAE,CAAC;AAAE1B,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,KAAmBkB,WAAW,CAACnB,GAAD,EAAMC,IAAN,EAAYoB,KAAK,CAACW,QAAlB,CAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGX,KAAK,CAACW,QAAN,CAAehC,GAAf,CAAoBiC,OAAD,IAClB,MAAC,MAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACC,EADf;AAEE,IAAA,GAAG,EAAED,OAAO,CAACE,MAAR,CAAeP,QAFtB;AAGE,IAAA,GAAG,EAAEK,OAAO,CAACE,MAAR,CAAeN,SAHtB;AAIE,IAAA,IAAI,EAAEI,OAAO,CAACG,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CANH,CADJ,CADF;AAmBD,CA/BD;;AAiCA,eAAehB,GAAf;AAEA,OAAO,eAAeiB,kBAAf,CAAkC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAlC,EAAgD;AACrD,QAAMC,OAAO,GAAG,MAAM3C,KAAK,CAAC4C,UAAN,CAAiBH,GAAjB,CAAtB;AACA,QAAMI,WAAW,GAAG,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,MAAzB,CAAgC,CAAhC,EAAmC,EAAnC,CAApB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIzB,KAAK,GAAG;AAAEM,IAAAA,IAAI,EAAE,EAAR;AAAYL,IAAAA,MAAM,EAAE,KAApB;AAA2BE,IAAAA,WAAW,EAAE,KAAxC;AAA+CQ,IAAAA,QAAQ,EAAE;AAAzD,GAAZ;;AACA,MAAIQ,OAAJ,EAAa;AACX,UAAM;AAAEb,MAAAA;AAAF,QAAWa,OAAjB;AACA,UAAMO,aAAa,GAAG,MAAMjD,EAAE,CAC3BkD,UADyB,CACd,SADc,EAEzBC,GAFyB,CAErBP,WAFqB,EAGzBM,UAHyB,CAGd,QAHc,EAIzBC,GAJyB,CAIrBtB,IAAI,CAACuB,GAJgB,EAKzBC,GALyB,EAA5B;AAOA,QAAI3B,WAAW,GAAG,IAAlB;;AAEA,QAAIuB,aAAa,CAACK,IAAd,EAAJ,EAA0B;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAkBN,aAAa,CAACK,IAAd,EAAxB;AACA5B,MAAAA,WAAW,GAAG,KAAd;AACA,YAAM;AAAE8B,QAAAA;AAAF,UAAW,MAAMxD,EAAE,CACtBkD,UADoB,CACT,SADS,EAEpBC,GAFoB,CAEhBP,WAFgB,EAGpBM,UAHoB,CAGT,QAHS,EAIpBO,IAJoB,CAIf;AACJ7B,QAAAA,MAAM,EAAE2B,WADJ;AAEJG,QAAAA,MAAM,EAAE;AAFJ,OAJe,EAQpBL,GARoB,EAAvB;AAUAL,MAAAA,YAAY,GAAGQ,IAAI,CAACtD,GAAL,CAAUiD,GAAD,IAAS;AAC/B,cAAM;AAAEb,UAAAA,MAAF;AAAUiB,UAAAA;AAAV,YAA0BJ,GAAG,CAACG,IAAJ,EAAhC;AACA,cAAM;AAAExB,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA0BwB,WAAhC;AAEA,eAAO;AACLnB,UAAAA,EAAE,EAAEe,GAAG,CAACf,EADH;AAELE,UAAAA,MAFK;AAGLD,UAAAA,MAAM,EAAE;AAAEP,YAAAA,QAAF;AAAYC,YAAAA;AAAZ;AAHH,SAAP;AAKD,OATc,CAAf;AAUD;;AACDR,IAAAA,KAAK,GAAG;AAAEM,MAAAA,IAAF;AAAQL,MAAAA,MAAM,EAAE,IAAhB;AAAsBE,MAAAA,WAAtB;AAAmCQ,MAAAA,QAAQ,EAAEc;AAA7C,KAAR;AACD;;AACD,SAAO;AAAEzB,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import React, {Fragment, useEffect } from 'react'\r\nimport Marker from '../components/Marker';\r\nimport GoogleMap from '../components/GoogleMap';\r\nimport router from \"next/router\"\r\nimport auth0 from \"../lib/auth0\"\r\nimport { db } from \"../lib/db\"\r\n\r\nconst getMapBounds = (map, maps, places) => {\r\n  const bounds = new maps.LatLngBounds();\r\n  places.forEach((place) => {\r\n    bounds.extend(new maps.LatLng(\r\n      place.geometry.location.lat,\r\n      place.geometry.location.lng,\r\n    ));\r\n  });\r\n  return bounds;\r\n};\r\n\r\nconst bindResizeListener = (map, maps, bounds) => {\r\n  maps.event.addDomListenerOnce(map, 'idle', () => {\r\n    maps.event.addDomListener(window, 'resize', () => {\r\n      map.fitBounds(bounds);\r\n    });\r\n  });\r\n};\r\n\r\nconst apiIsLoaded = (map, maps, places) => {\r\n  const bounds = getMapBounds(map, maps, places);\r\n  map.fitBounds(bounds);\r\n  bindResizeListener(map, maps, bounds);\r\n};\r\n\r\nconst App = (props) => {\r\n  useEffect(() => {\r\n    if (!props.isAuth) router.push(\"/\")\r\n    else if (props.forceCreate) router.push(\"/create-status\")\r\n  })\r\n\r\n  const defaultProps = {\r\n    center: [props.user.latitude, props.user.longitude]\r\n  }\r\n\r\n  if (!props.isAuth || props.forceCreate) return null\r\n  \r\n  return (\r\n    <div style={{ height: '100vh', width: '100%' }}>\r\n        <GoogleMap\r\n        defaultCenter={defaultProps.center}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        defaultZoom={10}\r\n        onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps, props.checkins)}\r\n        >\r\n          {props.checkins.map((checkin) => (\r\n            <Marker\r\n              key={checkin.id}\r\n              lat={checkin.coords.latitude}\r\n              lng={checkin.coords.longitude}\r\n              text={checkin.status}\r\n            />\r\n          ))}\r\n        </GoogleMap>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\nexport async function getServerSideProps({ req, res }) {\r\n  const session = await auth0.getSession(req)\r\n  const currentDate = new Date().toISOString().substr(0, 10)\r\n  let checkinsList = []\r\n  let props = { user: {}, isAuth: false, forceCreate: false, checkins: [] }\r\n  if (session) {\r\n    const { user } = session\r\n    const todaysCheckin = await db\r\n      .collection(\"markers\")\r\n      .doc(currentDate)\r\n      .collection(\"checks\")\r\n      .doc(user.sub)\r\n      .get()\r\n    \r\n    let forceCreate = true\r\n\r\n    if (todaysCheckin.data()) {\r\n      const { coordinates } = todaysCheckin.data()\r\n      forceCreate = false\r\n      const { docs } = await db\r\n        .collection(\"markers\")\r\n        .doc(currentDate)\r\n        .collection(\"checks\")\r\n        .near({\r\n          center: coordinates,\r\n          radius: 18000,\r\n        })\r\n        .get()\r\n\r\n      checkinsList = docs.map((doc) => {\r\n        const { status, coordinates } = doc.data()\r\n        const { latitude, longitude } = coordinates \r\n\r\n        return {\r\n          id: doc.id,\r\n          status,\r\n          coords: { latitude, longitude },\r\n        }\r\n      })\r\n    }\r\n    props = { user, isAuth: true, forceCreate, checkins: checkinsList }\r\n  }\r\n  return { props }\r\n}"]},"metadata":{},"sourceType":"module"}