{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\mydailystatus\\\\pages\\\\app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport router from \"next/router\";\nimport auth0 from \"../lib/auth0\";\nimport { db } from \"../lib/db\";\nimport GoogleMapReact from 'google-map-react';\nimport { distance } from \"../lib/geo\";\nimport MyGreatPlace from './my_great_place.jsx';\n\nfunction createMapOptions(maps) {\n  return {\n    zoomControlOptions: {\n      position: maps.ControlPosition.RIGHT_CENTER,\n      style: maps.ZoomControlStyle.SMALL\n    },\n    mapTypeControlOptions: {\n      position: maps.ControlPosition.TOP_RIGHT\n    },\n    mapTypeControl: true\n  };\n}\n\nconst App = props => {\n  useEffect(() => {\n    if (!props.isAuth) router.push(\"/\");else if (props.forceCreate) router.push(\"/create-status\");\n  });\n  const defaultProps = {\n    center: [props.user.latitude, props.user.longitude],\n    zoom: 9,\n    greatPlaceCoords: {\n      lat: 59.724465,\n      lng: 30.080121\n    }\n  };\n  if (!props.isAuth || props.forceCreate) return null;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    className: \"font-bold text-4xl py-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Status pr\\xF3ximos a voc\\xEA:\"), __jsx(GoogleMapReact, {\n    defaultCenter: defaultProps.center,\n    yesIWantToUseGoogleMapApiInternals: true,\n    options: createMapOptions,\n    zoom: defaultProps.zoom,\n    onGoogleApiLoaded: ({\n      map,\n      maps\n    }) => handleApiLoaded(map, maps),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, props.checkins.map(checkin => __jsx(MyGreatPlace, {\n    lat: checkin.coords.latitude,\n    lng: checkin.coords.longitude,\n    text: checkin.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default App;\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req);\n  const currentDate = new Date().toISOString().substr(0, 10);\n  let checkinsList = [];\n  let props = {\n    user: {},\n    isAuth: false,\n    forceCreate: false,\n    checkins: []\n  };\n\n  if (session) {\n    const {\n      user\n    } = session;\n    const todaysCheckin = await db.collection(\"markers\").doc(currentDate).collection(\"checks\").doc(user.sub).get();\n    let forceCreate = true;\n\n    if (todaysCheckin.data()) {\n      const {\n        coordinates\n      } = todaysCheckin.data();\n      forceCreate = false;\n      const {\n        docs\n      } = await db.collection(\"markers\").doc(currentDate).collection(\"checks\").near({\n        center: coordinates,\n        radius: 18000\n      }).get();\n      checkinsList = docs.map(doc => {\n        const {\n          status,\n          coordinates\n        } = doc.data();\n        const {\n          latitude,\n          longitude\n        } = coordinates;\n        const {\n          latitude: lat,\n          longitude: long\n        } = coordinates;\n        return {\n          id: doc.id,\n          status,\n          coords: {\n            latitude,\n            longitude\n          },\n          distance: distance(lat, long, latitude, longitude)\n        };\n      });\n    }\n\n    props = {\n      user,\n      isAuth: true,\n      forceCreate,\n      checkins: checkinsList\n    };\n  }\n\n  return {\n    props\n  };\n}","map":{"version":3,"sources":["C:/Users/andre/Desktop/mydailystatus/pages/app.js"],"names":["useEffect","router","auth0","db","GoogleMapReact","distance","MyGreatPlace","createMapOptions","maps","zoomControlOptions","position","ControlPosition","RIGHT_CENTER","style","ZoomControlStyle","SMALL","mapTypeControlOptions","TOP_RIGHT","mapTypeControl","App","props","isAuth","push","forceCreate","defaultProps","center","user","latitude","longitude","zoom","greatPlaceCoords","lat","lng","map","handleApiLoaded","checkins","checkin","coords","status","getServerSideProps","req","res","session","getSession","currentDate","Date","toISOString","substr","checkinsList","todaysCheckin","collection","doc","sub","get","data","coordinates","docs","near","radius","long","id"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,EAAT,QAAmB,WAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;AAEA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAO;AACLC,IAAAA,kBAAkB,EAAE;AAClBC,MAAAA,QAAQ,EAAEF,IAAI,CAACG,eAAL,CAAqBC,YADb;AAElBC,MAAAA,KAAK,EAAEL,IAAI,CAACM,gBAAL,CAAsBC;AAFX,KADf;AAKLC,IAAAA,qBAAqB,EAAE;AACrBN,MAAAA,QAAQ,EAAEF,IAAI,CAACG,eAAL,CAAqBM;AADV,KALlB;AAQLC,IAAAA,cAAc,EAAE;AARX,GAAP;AAUD;;AAED,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACrBpB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACoB,KAAK,CAACC,MAAX,EAAmBpB,MAAM,CAACqB,IAAP,CAAY,GAAZ,EAAnB,KACK,IAAIF,KAAK,CAACG,WAAV,EAAuBtB,MAAM,CAACqB,IAAP,CAAY,gBAAZ;AAC7B,GAHQ,CAAT;AAKA,QAAME,YAAY,GAAG;AACnBC,IAAAA,MAAM,EAAE,CAACL,KAAK,CAACM,IAAN,CAAWC,QAAZ,EAAsBP,KAAK,CAACM,IAAN,CAAWE,SAAjC,CADW;AAEnBC,IAAAA,IAAI,EAAE,CAFa;AAGnBC,IAAAA,gBAAgB,EAAE;AAACC,MAAAA,GAAG,EAAE,SAAN;AAAiBC,MAAAA,GAAG,EAAE;AAAtB;AAHC,GAArB;AAMA,MAAI,CAACZ,KAAK,CAACC,MAAP,IAAiBD,KAAK,CAACG,WAA3B,EAAwC,OAAO,IAAP;AACxC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,yBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAGE,MAAC,cAAD;AACE,IAAA,aAAa,EAAEC,YAAY,CAACC,MAD9B;AAEE,IAAA,kCAAkC,MAFpC;AAGE,IAAA,OAAO,EAAElB,gBAHX;AAIE,IAAA,IAAI,EAAEiB,YAAY,CAACK,IAJrB;AAKE,IAAA,iBAAiB,EAAE,CAAC;AAAEI,MAAAA,GAAF;AAAOzB,MAAAA;AAAP,KAAD,KAAmB0B,eAAe,CAACD,GAAD,EAAMzB,IAAN,CALvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKY,KAAK,CAACe,QAAN,CAAeF,GAAf,CAAoBG,OAAD,IAClB,MAAC,YAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACC,MAAR,CAAeV,QADtB;AAEE,IAAA,GAAG,EAAES,OAAO,CAACC,MAAR,CAAeT,SAFtB;AAGE,IAAA,IAAI,EAAEQ,OAAO,CAACE,MAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAPL,CAHF,CADF;AAqBD,CAlCD;;AAoCA,eAAenB,GAAf;AAEA,OAAO,eAAeoB,kBAAf,CAAkC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAlC,EAAgD;AACrD,QAAMC,OAAO,GAAG,MAAMxC,KAAK,CAACyC,UAAN,CAAiBH,GAAjB,CAAtB;AACA,QAAMI,WAAW,GAAG,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,MAAzB,CAAgC,CAAhC,EAAmC,EAAnC,CAApB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAI5B,KAAK,GAAG;AAAEM,IAAAA,IAAI,EAAE,EAAR;AAAYL,IAAAA,MAAM,EAAE,KAApB;AAA2BE,IAAAA,WAAW,EAAE,KAAxC;AAA+CY,IAAAA,QAAQ,EAAE;AAAzD,GAAZ;;AACA,MAAIO,OAAJ,EAAa;AACX,UAAM;AAAEhB,MAAAA;AAAF,QAAWgB,OAAjB;AACA,UAAMO,aAAa,GAAG,MAAM9C,EAAE,CAC3B+C,UADyB,CACd,SADc,EAEzBC,GAFyB,CAErBP,WAFqB,EAGzBM,UAHyB,CAGd,QAHc,EAIzBC,GAJyB,CAIrBzB,IAAI,CAAC0B,GAJgB,EAKzBC,GALyB,EAA5B;AAOA,QAAI9B,WAAW,GAAG,IAAlB;;AAEA,QAAI0B,aAAa,CAACK,IAAd,EAAJ,EAA0B;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAkBN,aAAa,CAACK,IAAd,EAAxB;AACA/B,MAAAA,WAAW,GAAG,KAAd;AACA,YAAM;AAAEiC,QAAAA;AAAF,UAAW,MAAMrD,EAAE,CACtB+C,UADoB,CACT,SADS,EAEpBC,GAFoB,CAEhBP,WAFgB,EAGpBM,UAHoB,CAGT,QAHS,EAIpBO,IAJoB,CAIf;AACJhC,QAAAA,MAAM,EAAE8B,WADJ;AAEJG,QAAAA,MAAM,EAAE;AAFJ,OAJe,EAQpBL,GARoB,EAAvB;AAUAL,MAAAA,YAAY,GAAGQ,IAAI,CAACvB,GAAL,CAAUkB,GAAD,IAAS;AAC/B,cAAM;AAAEb,UAAAA,MAAF;AAAUiB,UAAAA;AAAV,YAA0BJ,GAAG,CAACG,IAAJ,EAAhC;AACA,cAAM;AAAE3B,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA0B2B,WAAhC;AACA,cAAM;AAAE5B,UAAAA,QAAQ,EAAEI,GAAZ;AAAiBH,UAAAA,SAAS,EAAE+B;AAA5B,YAAqCJ,WAA3C;AAEA,eAAO;AACLK,UAAAA,EAAE,EAAET,GAAG,CAACS,EADH;AAELtB,UAAAA,MAFK;AAGLD,UAAAA,MAAM,EAAE;AAAEV,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,WAHH;AAILvB,UAAAA,QAAQ,EAAEA,QAAQ,CAAC0B,GAAD,EAAM4B,IAAN,EAAYhC,QAAZ,EAAsBC,SAAtB;AAJb,SAAP;AAMD,OAXc,CAAf;AAYD;;AACDR,IAAAA,KAAK,GAAG;AAAEM,MAAAA,IAAF;AAAQL,MAAAA,MAAM,EAAE,IAAhB;AAAsBE,MAAAA,WAAtB;AAAmCY,MAAAA,QAAQ,EAAEa;AAA7C,KAAR;AACD;;AACD,SAAO;AAAE5B,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useEffect } from \"react\"\r\nimport router from \"next/router\"\r\nimport auth0 from \"../lib/auth0\"\r\nimport { db } from \"../lib/db\"\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { distance } from \"../lib/geo\"\r\nimport MyGreatPlace from './my_great_place.jsx';\r\n\r\nfunction createMapOptions(maps) {\r\n  return {\r\n    zoomControlOptions: {\r\n      position: maps.ControlPosition.RIGHT_CENTER,\r\n      style: maps.ZoomControlStyle.SMALL\r\n    },\r\n    mapTypeControlOptions: {\r\n      position: maps.ControlPosition.TOP_RIGHT\r\n    },\r\n    mapTypeControl: true\r\n  };\r\n}\r\n\r\nconst App = (props) => {\r\n  useEffect(() => {\r\n    if (!props.isAuth) router.push(\"/\")\r\n    else if (props.forceCreate) router.push(\"/create-status\")\r\n  })\r\n\r\n  const defaultProps = {\r\n    center: [props.user.latitude, props.user.longitude],\r\n    zoom: 9,\r\n    greatPlaceCoords: {lat: 59.724465, lng: 30.080121}\r\n  };\r\n\r\n  if (!props.isAuth || props.forceCreate) return null\r\n  return (\r\n    <div>\r\n      <h1 className='font-bold text-4xl py-8'>Status próximos a você:</h1>\r\n\r\n      <GoogleMapReact\r\n        defaultCenter={defaultProps.center}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        options={createMapOptions}\r\n        zoom={defaultProps.zoom}\r\n        onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\r\n        >\r\n          {props.checkins.map((checkin) => (\r\n            <MyGreatPlace\r\n              lat={checkin.coords.latitude}\r\n              lng={checkin.coords.longitude}\r\n              text={checkin.status}\r\n            />\r\n          ))}\r\n      </GoogleMapReact>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\nexport async function getServerSideProps({ req, res }) {\r\n  const session = await auth0.getSession(req)\r\n  const currentDate = new Date().toISOString().substr(0, 10)\r\n  let checkinsList = []\r\n  let props = { user: {}, isAuth: false, forceCreate: false, checkins: [] }\r\n  if (session) {\r\n    const { user } = session\r\n    const todaysCheckin = await db\r\n      .collection(\"markers\")\r\n      .doc(currentDate)\r\n      .collection(\"checks\")\r\n      .doc(user.sub)\r\n      .get()\r\n    \r\n    let forceCreate = true\r\n\r\n    if (todaysCheckin.data()) {\r\n      const { coordinates } = todaysCheckin.data()\r\n      forceCreate = false\r\n      const { docs } = await db\r\n        .collection(\"markers\")\r\n        .doc(currentDate)\r\n        .collection(\"checks\")\r\n        .near({\r\n          center: coordinates,\r\n          radius: 18000,\r\n        })\r\n        .get()\r\n\r\n      checkinsList = docs.map((doc) => {\r\n        const { status, coordinates } = doc.data()\r\n        const { latitude, longitude } = coordinates\r\n        const { latitude: lat, longitude: long } = coordinates\r\n\r\n        return {\r\n          id: doc.id,\r\n          status,\r\n          coords: { latitude, longitude },\r\n          distance: distance(lat, long, latitude, longitude),\r\n        }\r\n      })\r\n    }\r\n    props = { user, isAuth: true, forceCreate, checkins: checkinsList }\r\n  }\r\n  return { props }\r\n}"]},"metadata":{},"sourceType":"module"}