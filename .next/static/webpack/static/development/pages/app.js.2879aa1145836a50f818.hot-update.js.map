{"version":3,"file":"static/webpack/static\\development\\pages\\app.js.2879aa1145836a50f818.hot-update.js","sources":["webpack:///./pages/app.js"],"sourcesContent":["import React, {Fragment, useEffect } from 'react'\r\nimport Marker from '../components/Marker';\r\nimport GoogleMap from '../components/GoogleMap';\r\nimport router from \"next/router\"\r\nimport auth0 from \"../lib/auth0\"\r\nimport { db } from \"../lib/db\"\r\n\r\nconst getMapBounds = (map, maps, places) => {\r\n  const bounds = new maps.LatLngBounds();\r\n  places.forEach((place) => {\r\n    bounds.extend(new maps.LatLng(\r\n      place.geometry.location.lat,\r\n      place.geometry.location.lng,\r\n    ));\r\n  });\r\n  return bounds;\r\n};\r\n\r\nconst bindResizeListener = (map, maps, bounds) => {\r\n  maps.event.addDomListenerOnce(map, 'idle', () => {\r\n    maps.event.addDomListener(window, 'resize', () => {\r\n      map.fitBounds(bounds);\r\n    });\r\n  });\r\n};\r\n\r\nconst apiIsLoaded = (map, maps, places) => {\r\n  const bounds = getMapBounds(map, maps, places);\r\n  map.fitBounds(bounds);\r\n  bindResizeListener(map, maps, bounds);\r\n};\r\n\r\nconst App = (props) => {\r\n  useEffect(() => {\r\n    if (!props.isAuth) router.push(\"/\")\r\n    else if (props.forceCreate) router.push(\"/create-status\")\r\n  })\r\n\r\n  const defaultProps = {\r\n    center: [props.user.latitude, props.user.longitude]\r\n  }\r\n\r\n  if (!props.isAuth || props.forceCreate) return null\r\n  \r\n  return (\r\n    <div className='h-full w-full'>\r\n        <GoogleMap\r\n        defaultCenter={defaultProps.center}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        defaultZoom={10}\r\n        onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps, props.checkins)}\r\n        >\r\n          {props.checkins.map((checkin) => (\r\n            <Marker\r\n              key={checkin.id}\r\n              lat={checkin.coords.latitude}\r\n              lng={checkin.coords.longitude}\r\n              text={checkin.status}\r\n            />\r\n          ))}\r\n        </GoogleMap>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\nexport async function getServerSideProps({ req, res }) {\r\n  const session = await auth0.getSession(req)\r\n  const currentDate = new Date().toISOString().substr(0, 10)\r\n  let checkinsList = []\r\n  let props = { user: {}, isAuth: false, forceCreate: false, checkins: [] }\r\n  if (session) {\r\n    const { user } = session\r\n    const todaysCheckin = await db\r\n      .collection(\"markers\")\r\n      .doc(currentDate)\r\n      .collection(\"checks\")\r\n      .doc(user.sub)\r\n      .get()\r\n    \r\n    let forceCreate = true\r\n\r\n    if (todaysCheckin.data()) {\r\n      const { coordinates } = todaysCheckin.data()\r\n      forceCreate = false\r\n      const { docs } = await db\r\n        .collection(\"markers\")\r\n        .doc(currentDate)\r\n        .collection(\"checks\")\r\n        .near({\r\n          center: coordinates,\r\n          radius: 18000,\r\n        })\r\n        .get()\r\n\r\n      checkinsList = docs.map((doc) => {\r\n        const { status, coordinates } = doc.data()\r\n        const { latitude, longitude } = coordinates \r\n\r\n        return {\r\n          id: doc.id,\r\n          status,\r\n          coords: { latitude, longitude },\r\n        }\r\n      })\r\n    }\r\n    props = { user, isAuth: true, forceCreate, checkins: checkinsList }\r\n  }\r\n  return { props }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAWA;AACA;;AACA;;;;A","sourceRoot":""}